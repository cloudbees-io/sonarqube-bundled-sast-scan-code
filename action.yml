apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: sonarqube-bundled
description: 'Build and scan repository'

inputs:
  language:
    description: 'Input to identify the language'
    required: true
    default: "true"
  cover-file-name:
    description: 'Coverage file path'
    required: false
    default: ""
  sonar-inclusion:
    description: 'Sonarqube Inclusion'
    required: false
    default: ""
  sonar-exclusion:
    description: 'Sonarqube Exclusion'
    required: false
    default: ""

runs:
  using: composite
  steps:
      - id: git-credentials
        name: Setup git credentials.
        uses: https://github.com/cloudbees-io/configure-git-global-credentials@v1
      - id: preprocessing
        name: validating the inputs
        uses: docker://alpine:latest
        run: |
          COVER="${{ inputs.cover-file-name }}"
          if ! test -f ${COVER} ;then
            echo "Unable to locate Coverage file in Cloudbees_Workspace, Running Sonarqube Without Coverage Data..."
          fi
      - id: golang-unit-test
        name: Golang unit test and coverage
        uses: docker://alpine:latest
        kind: test
        if: ${{ inputs.language == 'LANGUAGE_GOLANG' }} || ${{ inputs.language == 'GOLANG' }} || ${{ inputs.language == 'GO' }} 
        run: |
          if ! [ ${{ inputs.sonar-inclusion }} ='' ]
          then
            INCLUSION="${{ inputs.sonar-inclusion }}"
            echo "sonar.inclusions=${INCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.sonar-exclusion }} ='' ]
          then
            EXCLUSION="${{ inputs.sonar-exclusion }}"
            echo "sonar.exclusions=${EXCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.cover-file-name }} ='' ]
          then
            COVER="${{ inputs.cover-file-name }}"
            echo "sonar.go.coverage.reportPaths=${COVER}" >> sonar-project.properties
          fi
          cat sonar-project.properties
      - id: java-unit-test
        name: Java unit test and coverage
        uses: docker://alpine:latest
        if: ${{ inputs.language == 'LANGUAGE_JAVA' }} || ${{ inputs.language == 'JAVA' }}
        run: |
          echo "sonar.language=java" >> sonar-project.properties
          echo "sonar.java.binaries=./**" >> sonar-project.properties
          if ! [ ${{ inputs.sonar-inclusion }} ='' ]
          then
            INCLUSION="${{ inputs.sonar-inclusion }}"
            echo "sonar.inclusions=${INCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.sonar-exclusion }} ='' ]
          then
            EXCLUSION="${{ inputs.sonar-exclusion }}"
            echo "sonar.exclusions=${EXCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.cover-file-name }} ='' ]
          then
            COVER="${{ inputs.cover-file-name }}"
            echo "sonar.coverage.jacoco.xmlReportPaths=${COVER}" >> sonar-project.properties
          fi
          cat sonar-project.properties
      - id: javascript-unit-test
        name: Javascript unit test and coverage
        uses: docker://alpine:latest
        kind: test
        if: ${{ inputs.language == 'LANGUAGE_JAVASCRIPT' }} || ${{ inputs.language == 'JAVASCRIPT' }} || ${{ inputs.language == 'JS' }}
        run: |
          if ! [ ${{ inputs.sonar-inclusion }} ='' ]
          then
            INCLUSION="${{ inputs.sonar-inclusion }}"
            echo "sonar.test.inclusions=${INCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.sonar-exclusion }} ='' ]
          then
            EXCLUSION="${{ inputs.sonar-exclusion }}"
            echo "sonar.exclusions=${EXCLUSION}" >> sonar-project.properties  
          fi
          if ! [ ${{ inputs.cover-file-name }} ='' ]
          then
            COVER="${{ inputs.cover-file-name }}"
            echo "sonar.javascript.lcov.reportPaths=${COVER}" >> sonar-project.properties
          fi
          cat sonar-project.properties  
      - id: python-unit-test
        name: Python unit test and coverage
        uses: docker://alpine:latest
        kind: test
        if: ${{ inputs.language == 'LANGUAGE_PYTHON' }} || ${{ inputs.language == 'PYTHON' }}
        run: |
          if ! [ ${{ inputs.sonar-inclusion }} ='' ]
          then
            INCLUSION="${{ inputs.sonar-inclusion }}"
            echo "sonar.inclusions=${INCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.sonar-exclusion }} ='' ]
          then
            EXCLUSION="${{ inputs.sonar-exclusion }}"
            echo "sonar.exclusions=${EXCLUSION}" >> sonar-project.properties
          fi  
          if ! [ ${{ inputs.cover-file-name }} ='' ]
          then
            COVER="${{ inputs.cover-file-name }}" 
            echo "sonar.python.coverage.reportPaths=${COVER}" >> sonar-project.properties
          fi
          cat sonar-project.properties
      - id: php-unit-test
        name: PHP unit test and coverage
        uses: docker://alpine:latest
        kind: test
        if: ${{ inputs.language == 'LANGUAGE_PHP' }} || ${{ inputs.language == 'PHP' }}
        run: |
          echo "sonar.language=php" >> sonar-project.properties
          if ! [ ${{ inputs.sonar-inclusion }} ='' ]
          then
            INCLUSION="${{ inputs.sonar-inclusion }}"
            echo "sonar.inclusions=${INCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.sonar-exclusion }} ='' ]
          then
            EXCLUSION="${{ inputs.sonar-exclusion }}"
            echo "sonar.exclusions=${EXCLUSION}" >> sonar-project.properties
          fi
          if ! [ ${{ inputs.cover-file-name }} ='' ]
          then
            COVER="${{ inputs.cover-file-name }}" 
            echo "sonar.php.coverage.reportPaths=${COVER}" >> sonar-project.properties
          fi
          cat sonar-project.properties
      - id: sonarqube
        name: sonarqube        
        uses: docker://public.ecr.aws/l7o7z1g8/actions/bundled-sonarqube-sast-actions:main-f2c65e317c97eb43dfb15715a37ed701dd1ab6c1
        shell: bash
        env:
          RUN_ID: ${{ cloudbees.run_id }}
          JOB_ID: ${{ job.id }}
          STEP_ID: ${{ step.internal.id }}
          DNS_URL: ${{ cloudbees.api.url }}
          JWT_TOKEN: ${{ cloudbees.api.token }}
          CONFIG_JSON: '{"actor":"SCM-Bot","tenent_info":"default_tenant","asset_uuid":"c6cef160-c0b3-43a4-bda1-53ab484cc9da","profile_uuid":"profile-uuid-1","asset_identifier":"${{ cloudbees.scm.repositoryUrl }}","profile_identifier":"${{ cloudbees.scm.branch }}"}'
        run: |
          set -x
          cd /
          echo "RUN ID: ${{ cloudbees.run_id }}"
          echo "Job ID: ${{ job.id }}"
          echo "Step ID: ${{ step.internal.id }}"
          echo "DNS URL: ${{ cloudbees.api.url }}"
          echo "JWT TOKEN: ${{ cloudbees.api.token }}"
          cd $CLOUDBEES_WORKSPACE
          /bin/bash -c "/usr/local/bin/scan.sh"
